version: v2beta1
name: dadjokes

vars:
  OPENAI_API_KEY:
    source: env
  TAG: $(git describe --always)
  NAMESPACE: ${DEVSPACE_NAMESPACE}
  JOKE_SERVER: vfiftyfive/joke-server:${TAG}
  JOKE_WORKER: vfiftyfive/joke-worker:${TAG}
  ECR_PASSWORD: $(aws ecr-public get-login-password --region us-east-1)


# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all     
      ensure_pull_secrets --all
      create_deployments redis-operator dynamodb-operator
      create_deployments nats joke-server joke-worker custom-resources
      start_dev --all

  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments  redis-operator dynamodb-operator
      create_deployments nats joke-server joke-worker custom-resources
  build: |-
    run_dependencies --all
    build_images --all -t $(git describe --always)
# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  joke-server:
    image: ${JOKE_SERVER}
    dockerfile: ../../cmd/joke-server/Dockerfile
    context: ../..
  joke-worker:
    image: ${JOKE_WORKER}
    dockerfile: ../../cmd/joke-worker/Dockerfile
    context: ../..

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  redis-operator:
    helm:
      chart:
        name: redis-operator
        repo: https://ot-container-kit.github.io/helm-charts/
  dynamodb-operator:
    helm:
      name: oci://public.ecr.aws/aws-controllers-k8s/dynamodb-chart
      username: AWS
      password: ${ECR_PASSWORD}
      version: 1.2.10
  nats:
    helm:
      chart:
        name: nats
        repo: https://nats-io.github.io/k8s/helm/charts/
  joke-server:
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      # We are deploying this project with the Helm chart you provided
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      values:
        containers:
          - image: ${JOKE_SERVER}
            env: 
            - name: NATS_URL
              value: nats://nats:4222
        service:
          ports:
            - port: 8080
  joke-worker:
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      # We are deploying this project with the Helm chart you provided
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      values:
        containers:
          - image: ${JOKE_WORKER}
            env: 
              - name: NATS_URL
                value: nats://nats:4222
              - name: REDIS_URL
                value: redis:6379
              - name: OPENAI_API_KEY
                valueFrom:
                  configMapKeyRef:
                    name: openai-api-key
                    key: OPENAI_API_KEY
  custom-resources:
    kubectl:
      manifests:
      - custom-resources/

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  joke-server:
    imageSelector: ${JOKE_SERVER}
    ports:
    - port: "8080"
  joke-worker:
    imageSelector: ${JOKE_WORKER}
    command: ["./joke-worker"]
    restartHelper:
      inject: true
    sync:
    - path: ../../cmd/joke-worker:/app/cmd/joke-worker
      onUpload:
        restartContainer: true
        exec:
        - command: |-
            go build -o joke-worker ./cmd/joke-worker/main.go
    - path: ../../go.mod:/app/go.mod
    - path: ../../go.sum:/app/go.sum
    - path: ../../internal:/app/internal
      onUpload:
        restartContainer: true
        exec:
        - command: |-
            go build -o joke-worker ./cmd/joke-worker/main.go

hooks:
  - name: "Decrypt OPENAI_API_KEY"
    command: "sops -d openai-api-key.enc.yaml | sed '/data: |/d' | kubectl apply -n ${NAMESPACE} -f -"
    events: ["before:deploy"]
  - name: "Delete redis resources"
    command: "kubectl delete -n ${NAMESPACE} redis --all"
    events: ["before:purge"]
  - name: "Delete PVCs"
    command: "kubectl delete -n ${NAMESPACE} pvc --all"
    events: ["after:purge"]

commands:
  encrypt-openai-secret: |-
    kubectl create secret generic openai-api-key \
        --from-literal=OPENAI_API_KEY=${OPENAI_API_KEY} \
        --dry-run=client -o yaml > openai-secret.yaml && \
    sops -e openai-secret.yaml > openai-api-key.enc.yaml && \
    rm openai-secret.yaml
